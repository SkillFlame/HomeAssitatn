blueprint:
  name: Ikea remote via zigbee2mqtt
  description: "Controls a light with a switch given by ENTITY. \n\nShort Button press will toggle light for both Buttons (helpfull in darkness) \n\n Mode set to restart is mandatory for stop after long press to work."
  domain: automation
  input:
    source_switch_e1743_action:
      name: Tradfri E1743 Switch
      description: The switch-action which triggers this automation.
      selector:
        entity:
          filter:
            - integration: mqtt
              domain: sensor
    remote_name:
      name: (Zigbee2MQTT) Remote Name
      description: The name of the controller (e.g. IKEA Rodret). **_Choose if you are using Zigbee2MQTT._**
      default: ""
    lights:
      name: lights
      description: the lights you want to control.
      selector:
        target:
    on_double_press:
      name: On - Double press event
      description:
        Choose whether or not to expose the virtual **double press** event
        for the **on** button. Turn this on if you are providing an action for the **on**
        button double press event.
      default: false
      selector:
        boolean: {}
    on_double_press_action:
      name: On - Double press action
      description:
        Choose action(s) to run when pressing the **on** button twice in **Helper - Double press
        delay** interval. **On - Double press event** must be exposed.
      default: []
      selector:
        action: {}
    off_double_press:
      name: Off - Double press event
      description:
        Choose whether or not to expose the virtual **double press** event
        for the **off** button. Turn this on if you are providing an action for the **off**
        button double press event.
      default: false
      selector:
        boolean: {}
    off_double_press_action:
      name: Off - Double press action
      description:
        Choose action(s) to run when pressing the **off** button twice in **Helper - Double press
        delay** interval. **Off - Double press event** must be exposed.
      default: []
      selector:
        action: {}
    arrow_left_click_double_press:
      name: arrow_left_click - Double press event
      description:
        Choose whether or not to expose the virtual **double press** event
        for the **arrow_left_click** button. Turn this on if you are providing an action for the **arrow_left_click**
        button double press event.
      default: false
      selector:
        boolean: {}
    arrow_left_click_double_press_action:
      name: arrow_left_click - Double press action
      description:
        Choose action(s) to run when pressing the **arrow_left_click** button twice in **Helper - Double press
        delay** interval. **arrow_left_click - Double press event** must be exposed.
      default: []
      selector:
        action: {}
    arrow_right_click_double_press:
      name: arrow_right_click - Double press event
      description:
        Choose whether or not to expose the virtual **double press** event
        for the **arrow_right_click** button. Turn this on if you are providing an action for the **arrow_right_click**
        button double press event.
      default: false
      selector:
        boolean: {}
    arrow_right_click_double_press_action:
      name: arrow_right_click - Double press action
      description:
        Choose action(s) to run when pressing the **arrow_right_click** button twice in **Helper - Double press
        delay** interval. **arrow_right_click - Double press event** must be exposed.
      default: []
      selector:
        action: {}
    helper_double_press_delay:
      name: Helper - Double press delay
      description:
        Max delay between the first and the second button press for the
        **Double press events**. Provide a value only if you are using a double press action.
        Increase this value if you notice that the double press action is not triggered
        properly.
      default: 400
      selector:
        number:
          unit_of_measurement: milliseconds
          min: 100.0
          max: 5000.0
          step: 10.0
          mode: slider
alias: Ikea remote via zigbee2mqtt
description: ""
trigger:
  - platform: state
    entity_id: !input source_switch_e1743_action
    id: "on"
    to: "on"
  - platform: state
    entity_id: !input source_switch_e1743_action
    id: "off"
    to: "off"
  - platform: state
    entity_id: !input source_switch_e1743_action
    id: arrow_left_click
    to: arrow_left_click
  - platform: state
    entity_id: !input source_switch_e1743_action
    id: arrow_right_click
    to: arrow_right_click
  - platform: state
condition: []
action:
  - variables:
      on_double_press: !input on_double_press
      off_double_press: !input off_double_press
      z2m_controller: !input remote_name
      lights: !input lights
  - choose:
      - conditions:
          - condition: trigger
            id:
              - "on"
        sequence:
          - if:
              - condition: template
                value_template: "{{ on_double_press }}"
            then:
              - wait_for_trigger:
                  - platform: mqtt
                    topic: "{{ 'zigbee2mqtt/' ~ z2m_controller ~ '/action' }}"
                    payload: "on"
                timeout:
                  milliseconds: !input helper_double_press_delay
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{ wait.trigger.idx is defined }}"
                then: !input on_double_press_action
                else: 
                  - service: light.turn_on
                    data: {}
                    target: !input lights
            else: 
              - service: light.turn_on
                data: {}
                target: !input lights
      - conditions:
          - condition: trigger
            id:
              - "off"
        sequence:
          - if:
              - condition: template
                value_template: "{{ off_double_press }}"
            then:
              - wait_for_trigger:
                  - platform: mqtt
                    topic: "{{ 'zigbee2mqtt/' ~ z2m_controller ~ '/action' }}"
                    payload: "off"
                timeout:
                  milliseconds: !input helper_double_press_delay
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{ wait.trigger.idx is defined }}"
                then: !input off_double_press_action
                else: 
                  - service: light.turn_off
                    data: {}
                    target: !input lights
            else: 
              - service: light.turn_off
                data: {}
                target: !input lights
      - conditions:
          - condition: trigger
            id:
              - "arrow_left_click"
        sequence:
          - if:
              - condition: template
                value_template: "{{ arrow_left_click_double_press }}"
            then:
              - wait_for_trigger:
                  - platform: mqtt
                    topic: "{{ 'zigbee2mqtt/' ~ z2m_controller ~ '/action' }}"
                    payload: "arrow_left_click"
                timeout:
                  milliseconds: !input helper_double_press_delay
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{ wait.trigger.idx is defined }}"
                then: !input arrow_left_click_double_press_action
                else: 
                  - service: light.turn_on
                    data:
                      kelvin: '{{ state_attr(lights.entity_id,"color_temp_kelvin")|int - 150 }}'
                      transition: 0.2
                    target: !input lights
                  - delay:
                      milliseconds: 200
            else: 
              - service: light.turn_on
                data:
                  kelvin: '{{ state_attr(lights.entity_id,"color_temp_kelvin")|int - 150 }}'
                  transition: 0.2
                target: !input lights
              - delay:
                  milliseconds: 200
      - conditions:
          - condition: trigger
            id:
              - "arrow_right_click"
        sequence:
          - if:
              - condition: template
                value_template: "{{ arrow_right_click_double_press }}"
            then:
              - wait_for_trigger:
                  - platform: mqtt
                    topic: "{{ 'zigbee2mqtt/' ~ z2m_controller ~ '/action' }}"
                    payload: "arrow_right_click"
                timeout:
                  milliseconds: !input helper_double_press_delay
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{ wait.trigger.idx is defined }}"
                then: !input arrow_right_click_double_press_action
                else: 
                  - service: light.turn_on
                    data:
                      kelvin: '{{ state_attr(lights.entity_id,"color_temp_kelvin")|int + 150 }}'
                      transition: 0.2
                    target: !input lights
                  - delay:
                      milliseconds: 200
            else: 
              - service: light.turn_on
                data:
                  kelvin: '{{ state_attr(lights.entity_id,"color_temp_kelvin")|int + 150 }}'
                  transition: 0.2
                target: !input lights
              - delay:
                  milliseconds: 200
mode: single
